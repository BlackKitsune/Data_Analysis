## Code for reading a csv file and store each row +++++++++++++++++++++++++++++

# import unicodecsv

# Option 1: open/close and for loop to create list
#enrollments = []
#f = open('enrollments.csv', 'rb')
#reader = unicodecsv.DictReader(f)

#for row in reader:
#  enrollments.append(row)
#  
#f.close()
#
#print(enrollments[0])

# Option 2: with open and list for creating the list
#with open('enrollments.csv', 'rb') as f:
#    reader = unicodecsv.DictReader(f)
#    enrollments = list(reader)
#
#print(enrollments[0])

## TEST READ CSV: Create a list for each of the variables +++++++++++++++++++++

# import unicodecsv

# enrollments_filename = '/Users/isabelfg/Documents/dataset/enrollments.csv'

## Longer version of code (replaced with shorter, equivalent version below)

# enrollments = []
# f = open(enrollments_filename, 'rb')
# reader = unicodecsv.DictReader(f)
# for row in reader:
#     enrollments.append(row)
# f.close()
#
#with open(enrollments_filename, 'rb') as f:
#    reader = unicodecsv.DictReader(f)
#    enrollments = list(reader)
#
#print(enrollments[0])
#    
#### Write code similar to the above to load the engagement
#### and submission data. The data is stored in files with
#### the given filenames. Then print the first row of each
#### table to make sure that your code works. You can use the
#### "Test Run" button to see the output of your code.
#
#engagement_filename = '/Users/isabelfg/Documents/dataset/daily_engagement.csv'
#submissions_filename = '/Users/isabelfg/Documents/dataset/project_submissions.csv'
#    
##daily_engagement = None
#with open(engagement_filename, 'rb') as f:
#    reader = unicodecsv.DictReader(f)
#    daily_engagement = list(reader)
#
#print(daily_engagement[0])
#
##project_submissions = None
#with open(submissions_filename, 'rb') as f:
#    reader = unicodecsv.DictReader(f)
#    project_submissions = list(reader)
#
#print(project_submissions[0])

## Option 3: Create a function to open the file 'filename':
import unicodecsv

datadir = '/Users/isabelfg/Documents/dataset/'

def read_csv(filename):
    with open(filename, 'rb') as f:
        reader = unicodecsv.DictReader(f)
        return list(reader)

enrollments_filename = datadir + 'enrollments.csv'
engagement_filename = datadir + 'daily_engagement.csv'
submissions_filename = datadir + 'project_submissions.csv'

enrollments = read_csv(enrollments_filename)
daily_engagement = read_csv(engagement_filename)
project_submissions = read_csv(submissions_filename)

# print(enrollments[0])
# print(project_submissions[0])
# print(daily_engagement[0])

## FIXING DATA TYPES: Transform data list from string --> format ++++++++++++++
# CSV data does not identify waht type of variable and store it as string
# Transform after importing the data better that when used in the code

from datetime import datetime as dt

# Function PARSE_DATE(DATE)
# Takes a date as a string, and returns a Python datetime object.
# If there is no date given, returns None

def parse_date(date):
    if date == '':
        return None
    else:
        return dt.strptime(date, '%Y-%m-%d')

# Function PARSE_MAYBE_INT(I)
# Takes a string which is either an empty string or represents an integer
# and returns an int or None.

def parse_maybe_int(i):
    if i == '': 
        return None
    else:
        return int(i)

# Clean up the data types in the enrollments table
        
for enrollment in enrollments:
    enrollment['cancel_date'] = parse_date(enrollment['cancel_date'])
    enrollment['days_to_cancel'] = parse_maybe_int(enrollment['days_to_cancel'])
    enrollment['is_canceled'] = enrollment['is_canceled'] == 'True'
    enrollment['is_udacity'] = enrollment['is_udacity'] == 'True'
    enrollment['join_date'] = parse_date(enrollment['join_date'])
    
print(enrollments[0])

# Clean up the data types in the engagement table

for engagement_record in daily_engagement:
    engagement_record['lessons_completed'] = int(float(engagement_record['lessons_completed']))
    engagement_record['num_courses_visited'] = int(float(engagement_record['num_courses_visited']))
    engagement_record['projects_completed'] = int(float(engagement_record['projects_completed']))
    engagement_record['total_minutes_visited'] = float(engagement_record['total_minutes_visited'])
    engagement_record['utc_date'] = parse_date(engagement_record['utc_date'])

print(daily_engagement[0])

# Clean up the data types in the submissions table

for submission in project_submissions:
    submission['completion_date'] = parse_date(submission['completion_date'])
    submission['creation_date'] = parse_date(submission['creation_date'])
    
print(project_submissions[0])

### For each of these three tables, find the number of rows in the table and
### the number of unique students in the table. To find the number of unique
### students, you might want to create a set of the account keys in each table.

## Number of rows in the list
#enrollment_num_rows = len(enrollments) 
#print('Number of rows in enrollments: ', enrollment_num_rows)
#
## Number of unique students
#unique_enrolled_students = set()  # Create an empty set
#for enrollment in enrollments:    # Loop through the enrollments and...
#    # ... add the account key for each enrollment in the set
#    unique_enrolled_students.add(enrollment['account_key'])
#    
## Take the number of unique students by the lengh of the array.
## The reason of this two numbers being differnt is because students can enroll
## then cancel and reenroll later
#enrollment_num_unique_students = len(unique_enrolled_students)
#print('Number of unique students: ', enrollment_num_unique_students)
#
## Then if you check for the dayly enrollment there are a lot more, that makes
## sense since it will be multiple entries for each student
#engagement_num_rows = len(daily_engagement) 
#print('Number of daily engagements: ', engagement_num_rows)
#
#unique_engagement_students = set()  
#for engagement_record in daily_engagement:  
#    unique_engagement_students.add(engagement_record['acct'])
#
#engagement_num_unique_students = len(unique_engagement_students)
#print('Number of unique students: ', engagement_num_unique_students)
#
## Number of submissions
#submission_num_rows = len(project_submissions)
#print('Number of submissions: ', submission_num_rows)
#
#unique_project_submitters = set()  
#for project_submitter in project_submissions:  
#    unique_project_submitters.add(project_submitter['account_key'])
#
#submission_num_unique_students = len(unique_project_submitters)
#print('Number of projects submitted: ', submission_num_unique_students)

## Update the code by doing a function that finds the unique elements

# For that first we need to change the name of the column 'acct' of the
# table daily engagement to 'account_key'

# Check for every column in daily_engagement table the correct one
for engagement_record in daily_engagement:
    # copy the column into the new one...
    engagement_record['account_key'] = engagement_record['acct']
    # ... and remove the old column
    del[engagement_record['acct']]
    
daily_engagement[0]['account_key']

def get_unique_students(data):
    unique_students = set()
    for data_point in data:
        unique_students.add(data_point['account_key'])
    return unique_students

print('Number of enrollments: ', len(enrollments))
unique_enrolled_students = get_unique_students(enrollments)
print('Number of unique enrolled students: ', len(unique_enrolled_students))

print('Number of daily engagements: ', len(daily_engagement))
unique_engagement_students = get_unique_students(daily_engagement)
print('Number of unique engaged students: ', len(unique_engagement_students))

print('Number of submissions: ', len(project_submissions))
unique_project_submitters = get_unique_students(project_submissions)
print('Number of unique projects sumited: ', len(unique_project_submitters))

# Now we check why the enrollments and engaments don't have the same number
# of students

# Check the enrollment list to find the students not present in the engagement
for enrollment in enrollments:
    # Take the student key from enrollments...
    student = enrollment['account_key']
    # ... and check if it is not between the unique students engaged
    if student not in unique_engagement_students:
        # if not then print the enrollment and break to see the results
        print(enrollment)
        break

# The results show that the days to cancel are 0
# rderedDict([('account_key', '1219'), 
#             ('status', 'canceled'),
#             ('join_date', datetime.datetime(2014, 11, 12, 0, 0)),
#             ('cancel_date', datetime.datetime(2014, 11, 12, 0, 0)), 
#             ('days_to_cancel', 0), 
#             ('is_udacity', False), 
#             ('is_canceled', True)])









